pragma solidity >= 0.4.22 < 0.6.0;

contract Hyundai{
    
    uint8 public car_num;
    uint8 public price1;
    enum State { Created, Locked, Inactive }
    State public state;
    
    string public unit;
    string public symbol;
    uint8 public decimals;
    
    uint256 private totalSupply;
    uint256 public onetokenprice;
    
    address public owner;
    address public seller;
    address public buyer;

    mapping (address => uint256) private balance;
    mapping (address => int8) private blacklist;
    
    event Transfer(address from, address to, uint256 value);
    event exchange(address from, uint256 balance);
    event Aborted();
    event Initialized();
    event PurchaseConfirmed(address from, address to, uint8 num);
    event ItemReceived(address from, address to, uint8 num);
    
    constructor(string _unit, string _symbol, uint8 _decimals, uint256 _totalSupply, uint256 _onetokenprice) public {
        unit = _unit;
        symbol = _symbol;
        decimals = _decimals;
        totalSupply = _totalSupply;
        owner = msg.sender;
        onetokenprice = _onetokenprice;
    }
    
    modifier isOwner(){
        require(msg.sender == owner);
        _;
    }
    modifier onlyBuyer() {
        require(msg.sender == buyer);
        _;
    }
    modifier onlySeller() {
        require(msg.sender == seller);
        _;
    }
    modifier inState(State _state) {
        require(state == _state);
        _;
    }
    
    
    function () payable public {
        uint256 amount = msg.value * onetokenprice;
        totalSupply = totalSupply + amount;
        balance[msg.sender] += amount;
        owner.transfer(msg.value);
        emit exchange(msg.sender, balance[msg.sender]);
    }
    
    function _totalSupply() public view isOwner returns(uint256){
        return totalSupply;
    }
    
    function _transfer(address to, uint256 value) public returns(bool){
        require(blacklist[msg.sender] <= 0, "You're in blacklist!");
        
        if (balance[msg.sender] >= value && value > 0){
            balance[msg.sender] -= value;
            balance[to] += value;
            emit Transfer(msg.sender, to, value); //emit: to see log of events
            return true;
        }
        else {return false;}
    }
    
    function checkbalance() public view returns(uint256){
        return balance[msg.sender];
    }
    
    function RegisterBlacklist(address person) public isOwner{
        blacklist[person] += 1;
    }
    
    function DeleteBlacklist(address person) public isOwner{
        blacklist[person] += -1;
    }
    
    function checkBlacklist(address person) public view returns (int8){
        return blacklist[person];
    }
    
    function close() public{
        if (msg.sender != owner) revert();
        selfdestruct(owner);
    }
    
    /// 아주 기초적인 차량 등록 함수
    function whoIsSeller(address person) public {
        seller = person;
        car_num = 1;
        price1 = 100;
    }
    
    /// 구매자로서 구매를 확정합니다.
    /// 이 이더는 confirmReceived()가 호출 될때까지
    /// 잠길것입니다.
    function confirmPurchase(address to, uint8 num)
        public
        inState(State.Created)
        payable
    {
        require(num == car_num, "There's no corresponding number!");
        require(to == seller, "Wrong Seller!");
        emit PurchaseConfirmed(msg.sender, to, num);
        buyer = msg.sender;
        state = State.Locked;
    }
    
    /// 구매자가 아이템을 받았다고 확인.
    /// 이것은 잠긴 이더를 풀어줄것입니다.
    function confirmReceived(address to, uint8 num)
        public
        onlyBuyer
        inState(State.Locked)
    {
        require(balance[buyer] >= price1, "Try to exchange first");
        require(num == car_num, "Different number!");
        require(to == seller, "Different Seller!");
        emit ItemReceived(msg.sender, to, num);
        // 먼저 상태를 변경하는 것이 중요합니다.
        // 그렇지 않으면, `send`를 사용하며 호출된 콘트렉트는
        // 다시 여기를 호출할 수 있기 때문입니다.
        state = State.Inactive;
        _transfer(seller, price1);
    }
    
    /// 비활성화된 state 초기화
    function initializeState() public isOwner{
        require(state == State.Inactive);
        emit Initialized();
        state = State.Created;
        car_num = 0;
        price1 = 0;
    }
    
    /// 차량 등록 취소
    function abort()
        public
        onlySeller
        inState(State.Created)
    {
        emit Aborted();
        state = State.Inactive;
        car_num = 0;
        price1 = 0;
    }
}
